application:
  # Set to true if testing production env without Apache/Nginx
  serve_static_assets: false
  # Set to "https://" if running behind Apache/Nginx + https
  protocol: "http://"
  fake_cas: false
  fake_cas_id: "1" # Change this to the UID you want to fake cas auth with.
  # WebMock is not thread-safe, and so fake proxy support should
  # be disabled when no fakes are needed (e.g., in production).
  fake_proxies_enabled: true
  # timeout (in seconds) for outgoing http request establishment
  outgoing_http_timeout: 30
  layer: development
  # Lifespan of session cookie
  session_expiration: <%= 4.hours %>
  # Restrict deployment to the SIS service 'calcentral' or the ETS services 'bcourses' and 'oec'.
  provided_services: ['bcourses', 'oec']

logger:
  level: <%= ENV['LOGGER_LEVEL'] || WARN %>
  stdout: <%= ENV['LOGGER_STDOUT'] %>
  slow_query_threshold_in_ms: 700
  slow_request_threshold_in_ms:
    default: 30000
    /api/my/status: 10000
  proxy_threshold_in_ms: 8000

cas_server: 'https://auth.berkeley.edu/cas'

cas_logout_url: 'https://auth.berkeley.edu/cas/logout'

cas_use_name_identifier: false

# Database settings
postgres:
  database: <%= ENV['DB_ENV_POSTGRESQL_DB'] || 'calcentral_production' %>
  username: <%= ENV['DB_ENV_POSTGRESQL_USER'] || 'calcentral_production' %>
  password: <%= ENV['DB_ENV_POSTGRESQL_PASS'] || 'secret' %>
  host: <%= ENV['DB_PORT_5432_TCP_ADDR'] || 'localhost' %>
  port: <%= ENV['DB_PORT_5432_TCP_PORT'] || '5432' %>
  pool: 95
  sslmode: <%= ENV['DB_ENV_POSTGRESQL_SSLMODE'] || 'disable' %>
  sslcert: <%= ENV['DB_ENV_POSTGRESQL_SSLCERT'] || nil %>
  sslkey: <%= ENV['DB_ENV_POSTGRESQL_SSLKEY'] || nil %>

edodb:
  fake: false
  adapter: postgresql
  pool: 95

terms:
  # Limit how far back our academic history goes.
  oldest: spring-2010
  # This term and earlier have slightly different CCN logic, currently relevant only to Webcasts.
  legacy_cutoff: summer-2016
  # Timestamp in UTC, needed when testing against test Campus data.
  # Can also be used to force selection of a "current term" different
  # from the default.
  fake_now:
  # If hub term API is disabled (see hub_term_api in features flags),
  # and this flag is false, query the EDO DB for terms data.
  # If this flag is true, use /public/json/terms.json or the file specified below.
  use_term_definitions_json_file: false
  term_definitions_json_file:

test_sqlite:
  pool: 3

# Proxy support
# MUST BE SET FOR DEVELOPMENT & PRODUCTION
# Example generated with SecureRandom.base64(32)
oauth2:
  key: "IeGpe9iq27Glqujd8pGH1+xM8C/ofm97Lp74N+6cN0I="
  encryption: "aes-256-cbc"

# Proxy settings
# Set "fake: true" for any inaccessible ones
canvas_proxy:
  admin_access_token: "someMumboJumbo"
  # URL for Canvas server
  url_root: "http://localhost:12345"
  fake: false
  account_id: '90242'
  admin_tools_account_id: '129607'
  official_courses_account_id: '129410'
  projects_account_id: '129407'
  projects_term_id: '5494'
  projects_template_id: '1283463'
  default_grading_scheme_id: '4068930'
  export_directory: 'tmp/canvas'
  lti_key: 'someMumboJumbo'
  lti_secret: 'someMumboJumbo'
  # Only used for testing + recording responses
  test_user_id: "300846"
  test_user_access_token: "someMumboJumbo"
  mixed_sis_user_id: true
  # Set to any string to make integration scripts create CSV files and log intended updates
  # without actually changing anything in Canvas.
  dry_run_import: <%= ENV['CANVAS_DRY_RUN_IMPORT'] || '' %>
  # Set to false to disable synchronization of obfuscated names in Dev/QA.
  maintain_user_names: true
  # Set to false to disable user account inactivation based on campus data.
  inactivate_expired_users: true
  # Set to false if Canvas permissions block our ability to delete an invalid email address.
  delete_bad_emails: true
  # Throttle automatic site membership refresh if more than these many enrollments are being dropped.
  max_deleted_enrollments: 1000
  # Throttle refresh of recent updates in order not to overload the Canvas background job queue.
  max_recent_membership_updates: 1000
  # Set to false to use an API loop to change SIS User IDs and upload SIS Import files one at a time.
  import_zipped_csvs: true
  # URL for scripts to point to CalCentral/Junction
  app_provider_host: 'http://localhost:3000'
  test_admin_id:
  test_servers:
  test_cas_url: 'https://auth-test.berkeley.edu/cas'
  # If reports are provided through Google Drive, this is the UID that creates them.
  reporter_uid:
  # Course sites before this term will not be linked to campus SIS data.
  oldest_official_term: 2016-D
  # How many minutes for the refresh script to wait for a SIS Import to finish processing.
  sis_import_timeout: 90

ldap:
  host: 'ldap.berkeley.edu'
  port: 636
  application_bind: 'uid=someApp,ou=applications,dc=berkeley,dc=edu'
  application_password: 'someMumboJumbo'

google_proxy:
  client_id: 1
  client_secret: 'bogusClientSecret'
  scope:
    - profile
    - email
    - https://www.googleapis.com/auth/calendar
    - https://www.googleapis.com/auth/tasks
    - https://www.googleapis.com/auth/drive.readonly.metadata
    - https://mail.google.com/mail/feed/atom/'
  fake: false
  #Maps to tammi.chang.clc@gmail.com. Used for testing + recording responses
  test_user_access_token: "bogusAccessToken"
  test_user_refresh_token: "bogusRefreshToken"
  atom_mail_feed_url: "https://mail.google.com/mail/feed/atom/"

mailgun_proxy:
  fake: false
  base_url: 'https://api.mailgun.net/v3'
  domain: 'bcourses-mail.berkeley.edu'
  api_key: 'secret'
  max_retries: 4

hub_term_proxy:
  fake: false
  app_id: ''
  app_key: ''
  base_url: 'https://apis.berkeley.edu/uat/sis/v1/terms'

cal1card_proxy:
  fake: false
  base_url: 'https://webstage.housing.berkeley.edu/c1c/dyn'
  username: 'secret'
  password: 'secret'

# Analytics settings ID
# This will need to be different for every server (dev/qa/production)
google_analytics_id: UA-XXXXXX-X

# Sentry URL
# We use https://getsentry.com for our JavaScript Error logging
sentry_url: "https://facf7ad7bd7047f0a356e9322107ce50@app.getsentry.com/7185"

# Cache settings. 0 means never expire.
# WARNING: memcached's upper limit is 30 days. Specifying longer expiration than that will
# result in entries expiring instantly.
cache:
  # Array of server addresses in cluster (for memcached). These must match the hostnames
  # of the application cluster for CalCentral's BackgroundJobsCheck to work correctly.
  servers: ["localhost"]
  maximum_expires_in: <%= 29.days %>
  race_condition_ttl: <%= 10.seconds %>
  stale_connection_flush_interval: <%= 30.seconds %>
  pool: 20
  store: "memcached"
  log_level: <%= Logger::WARN %>
  expiration:
    default: <%= 35.minutes %>
    failure: <%= 30.seconds %>
    BackgroundJobsCheck: <%= 29.days %>
    User::Api: NEXT_08_00
    User::AuthenticationValidator: <%= 8.hours %>
    User::AuthenticationValidator::short: <%= 5.minutes %>
    Cal1card::Photo: <%= 4.hours %>

    Canvas::CourseStudents: <%= 15.minutes %>
    Canvas::CourseTeachers: <%= 5.minutes %>
    CanvasBackgroundJobs: <%= 24.hours %>
    CanvasLti::Egrades: <%= 1.minute %>
    CanvasLti::Lti: <%= 5.minutes %>

    Berkeley::Terms: NEXT_08_00
    Berkeley::LegacyTerms: <%= 29.days %>

    EdoOracle::CourseSections: <%= 8.hours %>
    EdoOracle::UserCourses::All: <%= 8.hours %>

    Canvas::MergedUserSites: <%= 30.minutes %>
    Canvas::UserCourses: <%= 30.minutes %>
    Canvas::Groups: <%= 30.minutes %>
    Canvas::UserActivityStream: <%= 10.minutes %>
    Canvas::Terms: <%= 8.hours %>
    Canvas::Todo: <%= 20.minutes %>
    Canvas::UpcomingEvents: <%= 20.minutes %>

    User::Identifiers::Cached: <%= 4.hours %>

    # Merge of independently cached feeds.
    HubEdos::MyStudent: <%= 5.minutes %>

    Oec::DepartmentMappings: <%= 4.hours %>

# This will enable http basic auth for the app and should NEVER be enabled in production
developer_auth:
  enabled: false
  password: topsecret!

background_threads:
  min: 2,
  max: 2,
  max_queue: 0  # unbounded work queue

background_jobs_check:
  time_between_pings: <%= 5.minutes %>

youtube_splash_id: '3Iz1NT9QKjI'

canvas_mailing_lists:
  prefer_canvas_email_addresses: false
  timestamp_tolerance: 60

oec:
  administrator_uid: ''
  enrollments_batch_size: 120000
  local_write_directory: 'tmp/oec'
  explorance:
    sftp_server: ''
    sftp_port: 22
    sftp_user: ''
    ssh_private_key_file: ''
  google:
    api_delay: 20
    uid: '1000000'
    client_id: 'oecClientId'
    client_secret: 'oecClientSecret'
    scope:
      - profile
      - email
      - https://mail.google.com/mail/feed/atom/
      - https://spreadsheets.google.com/feeds/
      - https://www.googleapis.com/auth/calendar
      - https://www.googleapis.com/auth/drive
      - https://www.googleapis.com/auth/drive.appdata
      - https://www.googleapis.com/auth/drive.apps.readonly
      - https://www.googleapis.com/auth/drive.file
      - https://www.googleapis.com/auth/drive.readonly.metadata
      - https://www.googleapis.com/auth/tasks
  current_terms_codes: [{
    year: 2015,
    code: "C"
  }]
  departments: [ 'A,RESEC', 'BIOLOGY', 'CATALAN', 'CHEM', 'DATASCI', 'ECON', 'ENE,RES', 'ENVECON', 'EPS', 'ESPM', 'GWS', 'INFO', 'INTEGBI', 'LGBT', 'LINGUIS', 'MATH', 'MCELLBI', 'NUSCTX', 'PHYSICS', 'PLANTBI', 'POL SCI', 'PORTUG', 'PSYCH', 'SPANISH', 'STAT' ]

hub_edos_proxy:
  fake: true
  base_url: 'https://sis-integration.berkeley.edu/apis/sis/v2/students'
  username: secret
  password: secret
  http_timeout_seconds: 30

data_loch:
  fake: true
  staging_directory: 'tmp/data_loch'
  advisees_key: 'calnet-data/sids/snapshot000'
  targets:
    - name: 's3_test'
      aws_key: 'key'
      aws_secret: 'secret'
      aws_region: 'region'
      bucket: 'bucket'
      prefix: 'exports/go/here'

edwdb:
  fake: false
  adapter: postgresql
  pool: 5

vue:
  localhost_base_url: null

# A feature will be disabled if the corresponding feature-flag is false or nil.
features:
  allow_alt_email_addr_for_enrollments: true
  authentication_validator: false
  background_jobs_check: true
  cal1card: false
  course_manage_official_sections: false
  hub_term_api: false
  ldap_student_affiliations: false
  manage_site_mailing_lists: false
  prevent_acting_as_users_from_posting: true
  reauthentication: true
  vue_js: false
